package me.dio.taskmaster.controller;

import me.dio.taskmaster.model.Task;
import me.dio.taskmaster.service.TaskService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/tasks")
public class TaskController {

    @Autowired
    private TaskService taskService;

    @GetMapping
    public List<Task> obterTodasTarefas() {
        return taskService.listarTodasTarefas();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Task> obterTarefaPorId(@PathVariable Long id) {
        Optional<Task> task = taskService.buscarTarefaPorId(id);
        return task.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Task> criarTarefa(@RequestBody Task task) {
        Task tarefaSalva = taskService.salvarTarefa(task);
        return ResponseEntity.status(HttpStatus.CREATED).body(tarefaSalva);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Task> atualizarTarefa(@PathVariable Long id, @RequestBody Task task) {
        Optional<Task> tarefaExistente = taskService.buscarTarefaPorId(id);
        if (tarefaExistente.isPresent()) {
            task.setId(id);
            Task tarefaAtualizada = taskService.salvarTarefa(task);
            return ResponseEntity.ok(tarefaAtualizada);
        }
        return ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> excluirTarefa(@PathVariable Long id) {
        Optional<Task> tarefaExistente = taskService.buscarTarefaPorId(id);
        if (tarefaExistente.isPresent()) {
            taskService.excluirTarefa(id);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }
}
